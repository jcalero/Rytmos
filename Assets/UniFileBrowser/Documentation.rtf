{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww19200\viewh13300\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs30 \cf0 Welcome to UniFileBrowser! This is a Unity package file with the UniFileBrowser.js script and an example usage scene. For best results, import this package into an empty Unity project. The UniFileBrowser script can be used with Javascript, C#, or Boo. When you use this script in your own projects, it needs to be located somewhere in your project folder where scripts are compiled last. That is, not in Standard Assets or Plugins (see the Unity documentation page about script compilation order if you need more information about that). There is also a helper script called Popup.cs that contains a GUI popup list function, which needs to be located somewhere that's compiled first, such as Standard Assets. More information about Popup.cs can be found here: {\field{\*\fldinst{HYPERLINK "http://www.unifycommunity.com/wiki/index.php?title=PopupList"}}{\fldrslt http://www.unifycommunity.com/wiki/index.php?title=PopupList}}\
\
The example scene is called 
\b FileBrowserExample
\b0 . It uses a simple script called FileBrowserExample. When this scene is opened and run, you'll see three buttons: Open, Save, and Open Folder. When one of these is clicked, it opens up the UniFileBrowser window with the appropriate open or save actions. You can browse through files and "open" or "save" a pretend file (or folder in the case of "Open Folder"), so you can see how it works. No file is actually opened or saved in this example; only the selected file or folder name is displayed temporarily.\
\

\b WARNING: 
\b0 there's an option to enable a Delete button, and unlike the open and save buttons, the Delete button is "live" and will really delete files. There's a confirmation dialog, but still, be careful about using this. If you enable the Delete button, you probably should also enable the LimitToInitialFolder option, which will limit the scope of possible damage by preventing navigation to other folders.\
\
Note that UniFileBrowser does not do any actual loading or saving of data. It's a file browser only. What you do with the files that are selected is up to you, since data handling depends entirely on the application you are writing. If you're unfamiliar with file IO, see the System.IO.File docs on MSDN: {\field{\*\fldinst{HYPERLINK "http://msdn.microsoft.com/en-us/library/system.io.file.aspx"}}{\fldrslt http://msdn.microsoft.com/en-us/library/system.io.file.aspx}}\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc\pardirnatural

\b \cf0 GENERAL FILE WINDOW USAGE
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
Operation should be pretty obvious to anyone familiar with typical file browsers. The window can be dragged with the title bar, and resized by dragging the lower-right corner. The popup menu at the top allows you to navigate to folders earlier in the current directory path.\
\
Files are normally presented in two groups, folders listed first and files listed second, with each group sorted alphabetically. If the "show volumes" option is checked, then there are three groups, with the first being a list of volumes (on OS X) or drive letters (on Windows). If the list of files can't fit in the window, the rest can be seen by using the scroll bar or mouse wheel. Files can be opened by either single-clicking them and then selecting "open", or double-clicking them. Files can be saved with the same methods, or by typing in a new name. Trying to save over an existing file will bring up a confirmation dialog that asks the user to cancel or replace. The optional delete button allows deletion of files.\
\
Full keyboard control is also implemented: up and down arrow keys will move the highlighted file up and down respectively. Holding alt while using the up and down arrow keys will jump to the top or bottom of the list. Holding Command/Apple (OS X) or control (Windows) while pressing the up arrow will go to the next higher directory level, and pressing down with a folder selected will enter that folder. Escape will either cancel a confirmation dialog or close the file browser window with no action, whichever is appropriate. Likewise, return/enter will OK a confirmation, select a highlighted file, or open a highlighted folder, whichever is appropriate.\
\
If the "Open Folder" function is used, then a Select button will appear next to the popup menu, and clicking this button will return the path to the folder that appears in the popup menu.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc\pardirnatural

\b \cf0 USING THE FILEBROWSER FUNCTIONS IN CODE
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
There are 9 public functions which you can access through code. Normally these are called by using SendMessage. If you're using Javascript, you can also use them by getting a reference to the UniFileBrowser.js script and calling the functions directly. Script compilation order issues prevent this method from working in C# or Boo, but it's easier to use SendMessage anyway. You can see a code example of these functions in action in the FileBrowserExample.js script. In order for UniFileBrowser to work, the UniFileBrowser.js script must be attached to some object in the scene. It's easier if the UniFileBrowser.js script is attached to the same GameObject that your own script (or scripts) are attached to, but not necessary (see "SetGameObject" below).\
\
SendMessage
\b ("OpenFileWindow")\

\b0 This causes the file browser window to open in Open mode.\
\
SendMessage
\b ("SaveFileWindow")\

\b0 This causes the file browser window to open in Save mode.\
\
SendMessage(
\b "OpenFolderWindow", showFiles : boolean
\b0 )\
This is similar to OpenFileWindow, except the purpose is to let the user select a directory/folder instead of a file. "showFiles" can either be true or false. If true, then both folders and files are shown when using this function (though only folders can be selected). If false, then only folders are shown.\
\
SendMessage
\b ("CloseFileWindow")\

\b0 Normally you shouldn't need to call this, since closing the window is typically initiated by the user, so this is handled automatically when appropriate after OpenFileWindow, SaveFileWindow, or OpenFolderWindow are called. But if you still need to do this for whatever reason, this function will, as expected, cause the file browser window to close immediately. The only exception is if an error or confirmation dialog window is currently open, since those are important and need to be handled properly.\
\
SendMessage(
\b "SetPath", path : String
\b0 )\
By default the path is initially set to the directory where your program is launched from. By passing the string "path", you can set it to be the path defined by this string instead. This should be called before using any of the Open or Save functions.\
\
SendMessage(
\b "SetGameObject", gameObject : GameObject
\b0 )\
If you have the UniFileBrowser.js script attached to a different object than your own scripts, then you can use this to set the GameObject that return messages should be sent to. This should be called before using any of the Open or Save functions. Of course, in this case you will need to get a reference to the UniFileBrowser script or the object it's attached to in order to send Open or Save messages. One simple way is FindObjectOfType:\
\
var fileBrowserScript = FindObjectOfType(UniFileBrowser);\
fileBrowserScript.SendMessage("SetGameObject", gameObject);\
fileBrowserScript.SendMessage("OpenFileWindow");\
\
Note that you only have to use SetGameObject once, unless you have multiple scripts on different GameObjects that use UniFileBrowser.\
\
If you're using C#, FindObjectOfType won't work because of script order compilation issues, so you'll need a reference to the GameObject that the UniFileBrowser script is attached to instead. One method is to use GameObject.Find, so assuming that the UniFileBrowser.js script is attached to a GameObject called "FileBrowserManager", you can do this:\
\
GameObject fileBrowserObject = GameObject.Find("FileBrowserManager");\
fileBrowserObject.SendMessage("SetGameObject", gameObject);\
fileBrowserObject.SendMessage("OpenFileWindow");\
\
SendMessage(
\b "SetWindowTitle", title : String
\b0 )\
In some cases you might want to use a different title for the file browser window other than the default "Open file"/"Save file"/"Select folder" titles. For example, if you have an app allows saving of several different types of files, and you want the title to reflect which type is being saved. In this case, you can use the SetWindowTitle function to override the default title. Just call SetWindowTitle with a string that holds the desired title, after calling OpenFileWindow or SaveFileWindow. For example,\
\
SendMessage("SaveFileWindow");\
SendMessage("SetWindowTitle", "Save image");\
\
It's important that SetWindowTitle be called afterwards, since otherwise the default title will be used.\
\

\b FileWindowOpen
\b0 \
This returns a boolean that's true or false depending on whether the file browser window is open or not. A reference to the script must be made in order to use this function. For example:\
\
var fileBrowserScript = GetComponent(UniFileBrowser);\
if (fileBrowserScript.FileWindowOpen()) \{\
   print ("Browser window is open")\
\}\
\

\b GetFileWindowRect\

\b0 This returns a Rect with the current GUI coordinates of the file browser window. As with FileWindowOpen, a reference to the script must be made in order to use this function. For example,\
\
var fileBrowserScript = GetComponent(UniFileBrowser);\
if (fileBrowserScript.GetFileWindowRect().Contains(Event.current.mousePosition)) \{\
   print ("Mouse inside file browser window")\
\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc\pardirnatural

\b \cf0 FUNCTIONS FOR RETURN MESSAGES
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
In order to make use of the information provided by the file browser, you must provide at least one function in your own scripts called 
\b OpenFile
\b0 , 
\b SaveFile
\b0 , or 
\b OpenFolder
\b0 , depending on the file action. UniFileBrowser.js calls these functions by using SendMessage when appropriate (namely, after the user has selected a file or folder). There's also a 
\b FileWindowClosed
\b0  message that's sent when the browser window is closed, which you can choose to use or not. What you do with the returned string is up to you, and depends on your app. Typically you'd make use of one of the System.File.IO functions found in Mono/.NET.\
\

\b OpenFile 
\b0 (pathToFile : String)\
The variable doesn't need to be called "pathToFile", but it does need to be a string. This contains the complete path and file name of the file that the user selected, ready for use in any System.IO function. If you need to display the file name only (without the path) for whatever reason, see the OpenFile function in the FileBrowserExample.js script for a method of extracting the file name.\
\

\b SaveFile 
\b0 (pathToFile : String)\
This is identical to OpenFile, except it is of course called when the user wants to save a file. Any file saving code you need to use should be placed in this function.\
\

\b OpenFolder 
\b0 (pathToFolder : String)\
The same as OpenFile, except called when the user has selected a folder, after OpenFolderWindow has been called.\
\

\b FileWindowClosed
\b0 \
This message is sent using SendMessageOptions.DontRequireReceiver, so if you don't implement it, it's ignored. If your app needs to know when the browser window is closed, make a function called FileWindowClosed, and it will be called as soon as the user closes the browser window.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc\pardirnatural

\b \cf0 FILEBROWSER PUBLIC VARIABLES IN THE INSPECTOR
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
In order for the file browser to work, the UniFileBrowser.js script must be attached to an object in the scene. Typically this is an empty game object which is used as a game manager. When this is done, you can see a number of options available as public variables:\
\

\b Filter Files:
\b0  if checked, this makes files be filtered by specified file extensions, such as .jpg, .txt, .unity, etc. So only the filtered files (and all folders) will be displayed.\

\b Filter File Extensions:
\b0  this is an array of file extensions to be used if file filtering is on. These can be entered either with a dot (".jpg") or without ("jpg"). This array can be left blank if you don't use the filter files option.\

\b Auto Add Extension:
\b0  if checked, this makes an extension automatically be added to any files that are saved. For example, if you have a routine for saving PNG files, you can specify that ".png" be added to any file that's saved.\

\b Added Extension:
\b0  this is the extension that will be added to saved files if Auto Add Extension is checked. It can be entered either with a dot (".jpg") or without ("jpg").\

\b Use Filter Button:
\b0  if checked, this makes a "Filter" button appear in the lower-left of the file browser window inside a small tab. This allows the user to toggle between files being filtered or not.\

\b Use Delete Button: 
\b0 if checked, this makes a "Delete" button appear to the left of the "Cancel" button. Unlike Open/Save, functionality for this button is built-in and doesn't need any file handling in your own scripts. 
\b WARNING! 
\b0 Obviously this can be quite destructive. Consider using "LimitToInitialFolder" (see below) if you enable this button.\

\b LimitToInitialFolder: 
\b0 if checked, the user will not be able to navigate away from the initial folder/directory. Only files will be shown in the file browser window, not folders, and while the folder popup menu is still there, using it to select different folders will have no effect. When using this option, you probably want to specify the path using the SetPath function (see "using the filebrowser functions in code"
\b  
\b0 above). Typically you would use this if you have a particular gamesave folder that you want all saves to go into.\

\b ShowVolumes: 
\b0 if checked, then a list of volumes (on OS X) or driver letters (on Windows) will appear at the top of the folder list, to allow navigation to different volumes. (Although this can always be done on OS X by browsing to "/Volumes" manually, but having a list is more convenient.) If LimitToInitialFolder is checked, then ShowVolumes will have no effect.\

\b Allow App Bundle Browsing:
\b0  on OS X, apps are bundled into folders with an ".app" extension. If this is checked, these app bundle folders can be browsed like any other folder. Otherwise they are invisible.\

\b Show Hidden OS X Files:
\b0  on OS X, files and folders are normally hidden if the name starts with ".". If this is checked, hidden files and folders are shown. Otherwise they are invisible.\

\b File Window ID: 
\b0 the window ID used by OnGUI for the main file browser window. Make sure this doesn't conflict with any of your own windows.\

\b Message Window ID: 
\b0 the window ID used by OnGUI for the error/confirmation dialog window. Again, make sure this doesn't conflict with any windows you may be using.\
\
The rest of the public variables are less likely to be changed, but are still useful to have exposed, particularly if you change the skin significantly:\
\

\b Default File Window Rect:
\b0  this is the default position and size of the file browser window when it's first opened.\

\b Min Window Width:
\b0  the file browser window is not allowed to be resized to anything smaller than this number of pixels wide.\

\b Min Window Height:
\b0  the file browser window is not allowed to be resized to anything smaller than this number of pixels high.\

\b Message Window Size:
\b0  this is the number of pixels wide and high the error/confirmation dialog window is. It always appears in the middle of the screen.\

\b Popup Rect: 
\b0 this is the position and size of the popup folder list button.\

\b Button Position: 
\b0 this is the number of pixels in from the right and bottom sides of the file browser window that the Cancel button appears at. The Open/Save button will always appear midway between the Cancel button and the right side.\

\b Button Size:
\b0  the Cancel, Delete, and Open/Save buttons are this number of pixels wide and high.\

\b Gui Depth: 
\b0 use this to make the file browser window appear on top of or behind elements drawn by other OnGUI functions. The default of -1 makes it drawn on top of anything that sets a GUI.depth of 0 or higher.\

\b Gui Skin:
\b0  the gui skin you want to use for the file browser should be dragged onto this slot. This is required, because it must contain several custom styles, as detailed below.\

\b Window Tab:
\b0  the texture you want to use for the "filter file extensions" tab should be dragged onto this slot. This is optional.\

\b Folder icon:
\b0  the texture you want to use for the folder icon in the file list should be dragged onto this slot. This is optional.\

\b File icon: 
\b0 the texture you want to use for the file icon in the file list should be dragged onto this slot. This is optional.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc\pardirnatural

\b \cf0 FILEBROWSER GUI SKIN
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
The file browser window can be reskinned as usual by using a GUISkin. See the Unity documentation on GUI skins if you're unsure about this process. However, there are a few extras you should be aware of. Namely, there are five custom styles that UniFileBrowser.js relies on, which must be present in the GUI skin. In the inspector, 
\b Custom Styles
\b0  is an array entry at the bottom of a custom GUISkin list. The size should be 5, and the entries should be named "listScrollview", "popupList", "popupButton", "popupBox", and "messageWindow". You can look at the included GUISkin to see how these are set up, but the important parts are listed below:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sa100\ql\qnatural\pardirnatural

\b \cf0 listScrollview:
\b0  This is used to show the folders and files in the file browser list. The 
\b Active
\b0  and 
\b On Normal
\b0  entries should have a highlight texture for the Background, so users can see what they've selected.\

\b popupList:
\b0  Similarly, the 
\b Hover
\b0  and 
\b On Hover
\b0  entries here should have a highlight texture for the Background, again so users can see what they're highlighting in the folder popup list.\

\b popupButton: 
\b0 This should have the texture used for the folder list popup button in the Background of the 
\b Normal
\b0  entry. None of the other entries need to have anything in them. In the supplied GUISkin, the texture has arrows on the right-hand side to indicate that it's a popup button, so the 
\b Border
\b0  values here prevent text from being potentially printed on top of the arrows.\

\b popupBox: 
\b0 This should have the texture used for the border/background of the popup folder list in the Background of the 
\b Normal
\b0  entry.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b \cf0 messageWindow:
\b0  This should be a duplicate of the regular Window style in the GUISkin, except it should have a different texture for the Background in the 
\b Normal
\b0  entry. The regular Window style should have a background graphic that depicts the resize widget (which is a 25x25 pixel area) in the lower-right corner, but message/dialog windows can't be resized, so the resize widget shouldn't be included in the background graphic for the messageWindow style.\
\
Aside from specifying the font you're using at the top of the custom GUISkin list, it also needs to be specified in the listScrollview style. Otherwise keyboard scrolling may not work properly, because the font needs to be present in this style in order for the line height calculation to work. (Which may be a bug in Unity, since it seems like it should automatically use the inherited font size, since that is, after all, what's displayed. But anyway, supplying the font makes it work properly.) If you're using a different font for the window title (the supplied GUISkin uses a larger font size, which must be imported as a separate font), this must be supplied for both the regular Window style and the messageWindow custom style.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc\pardirnatural

\b \cf0 LICENSE INFORMATION\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\b0 \cf0 This software is licensed to you (or your company) only. You can use it in as many projects as you like, and can alter the code as you see fit, but redistribution of the original or any modified versions is prohibited, except as necessary to produce a working runtime.\
\
\'a9 2011 Starscene Software}